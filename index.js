const telegramApi = require('node-telegram-bot-api')

const token = '6317598314:AAGuRDmLkt_snhc5FA-DLHcDSo0riinGbyE'

const bot = new telegramApi(token, {polling: true})

// const gameOptions = {
//     reply_markup: JSON.stringify({
//         inline_keyboard: [
//             [{text: '–í–≤–µ—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', callback_data: 'reminder'}],
//             [{text: '–í–≤–µ—Å—Ç–∏ –¥–∞—Ç—É', callback_data: 'timer'}]]
//     })
// }

let myTasks = new Map

const start = () => {
    bot.setMyCommands([
        {command: '/help', description: "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"},
        {command: '/menu', description: "–ú–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º"}
    ])

    bot.on('message', async msg => {
        const text = msg.text
        const chatId = msg.chat.id

        if (text === '/help') {

            return await bot.sendMessage(chatId, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –º–µ–Ω—é –∏–ª–∏ –∂–µ –≤–≤–µ–¥–∏—Ç–µ "/menu" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –¥–∞–ª–µ–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚è∞"')

        } else if (text === '/menu') {

            return await bot.sendMessage(chatId, '–ú–µ–Ω—é –±–æ—Ç–∞', {
                reply_markup: {
                    keyboard: [
                        ['–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚è∞'],
                        ['–ú–æ–∏ –∑–∞–¥–∞—á–∏ üóí']
                    ],
                    resize_keyboard: true
                }
            })

        } else if (text === '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ‚è∞') {

            return await bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Ç–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å: \n1) /task\n2) –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –≤–∞–º –Ω–∞–¥–æ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ –≤–∞—à–µ–º –∑–∞–ø—Ä–æ—Å–µ\n3) —Å–∞–º –∑–∞–ø—Ä–æ—Å')

        } else if (text.startsWith('/task')) {
            const arr = text.split(' ')
            const time = arr[1]

            arr.splice(0, 2)
            const task = arr.join(' ')

            setTimeout(async () => {
                myTasks.delete(time)
                return await bot.sendMessage(chatId, '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ' + task)
            }, time * 1000)

            myTasks.set(time, task)

            return await bot.sendMessage(chatId, '–ó–∞–¥–∞—á–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')

        } else if (text === '–ú–æ–∏ –∑–∞–¥–∞—á–∏ üóí') {

            let myTasksStr = ''

            for (let key of myTasks.keys()) {
                myTasksStr += `\n–ó–∞–¥–∞—á–∞: ${myTasks.get(key)}, –ù–∞–ø–æ–º–Ω–∏—Ç—å —á–µ—Ä–µ–∑  ${formatDuration(key)}`
            }

            if (!myTasks.size) {
                return await bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á')
            } else {
                return await bot.sendMessage(chatId, `<b>–í–∞—à–∏ –ó–∞–¥–∞—á–∏:</b> ${myTasksStr}`, {

                    parse_mode: "HTML"

                })
            }

        }


        return await bot.sendMessage(chatId, '–ü—Ä–æ—Å—Ç–∏—Ç–µ, —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é')
    })


    bot.on('callback_query', msg => {

        // let timer
        //
        // if(msg.data === 'timer'){
        //     timer =
        // }

    })

}

start()


function formatDuration(time) {
    if (time === 0) return "now"

    const years = (time - time % (3600 * 24 * 365)) / (3600 * 24 * 365)
    const days = (time - time % (3600 * 24) - years * 24 * 3600 * 365) / (24 * 3600)
    const hours = (time - time % 3600 - days * 24 * 3600 - years * 24 * 3600 * 365) / 3600
    const min = (time - hours * 3600 - time % 60 - days * 24 * 3600 - years * 24 * 3600 * 365) / 60
    const sec = time - hours * 3600 - min * 60 - days * 24 * 3600 - years * 24 * 3600 * 365

    let mapTime = new Map
    if (years !== 1) {
        mapTime.set("years", years)
    } else {
        mapTime.set("year", years)
    }
    if (days !== 1) {
        mapTime.set("days", days)
    } else {
        mapTime.set("day", days)
    }
    if (hours !== 1) {
        mapTime.set("hours", hours)
    } else {
        mapTime.set("hour", hours)
    }
    if (min !== 1) {
        mapTime.set("minutes", min)
    } else {
        mapTime.set("minute", min)
    }
    if (sec !== 1) {
        mapTime.set("seconds", sec)
    } else {
        mapTime.set("second", sec)
    }


    for (let time of mapTime.keys()) {
        if (mapTime.get(time) === 0) mapTime.delete(time)
    }

    let result = ''

    let count = 0
    for (let time of mapTime.keys()) {
        if (count !== mapTime.size - 1) {
            result += mapTime.get(time) + ' ' + time + ', '
        } else {
            result += mapTime.get(time) + ' ' + time
        }
        count++
    }
    if (result.lastIndexOf(",") === -1) return result

    return result.substr(0, result.lastIndexOf(',')) + " and " + result.substr(result.lastIndexOf(',') + 2)

}